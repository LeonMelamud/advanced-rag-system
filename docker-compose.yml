version: '3.8'

services:
  # Base image for all services
  base:
    build:
      context: .
      dockerfile: backend/Dockerfile.base
    image: collections_ai_assistance-base
    container_name: rag_base
    command: ["echo", "Base image built successfully"]

  # Database Services
  postgres:
    image: postgres:15-alpine
    container_name: rag_postgres
    environment:
      POSTGRES_DB: advanced_rag
      POSTGRES_USER: rag_user
      POSTGRES_PASSWORD: rag_password
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rag_user -d advanced_rag"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - rag_network

  redis:
    image: redis:7-alpine
    container_name: rag_redis
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - rag_network

  qdrant:
    image: qdrant/qdrant:latest
    container_name: rag_qdrant
    ports:
      - "6335:6333"
      - "6336:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
    healthcheck:
      test: ["CMD-SHELL", "timeout 10s bash -c '</dev/tcp/localhost/6333'"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - rag_network

  # Microservices
  auth_service:
    build:
      context: .
      dockerfile: backend/auth_service/Dockerfile
    container_name: rag_auth_service
    ports:
      - "8001:8000"
    env_file:
      - .env.development
    environment:
      - SERVICE_NAME=auth_service
    depends_on:
      base:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - rag_network
    restart: unless-stopped

  file_service:
    build:
      context: .
      dockerfile: backend/file_service/Dockerfile
    container_name: rag_file_service
    ports:
      - "8002:8000"
    env_file:
      - .env.development
    environment:
      - SERVICE_NAME=file_service
      - QDRANT_URL=http://qdrant:6333
    depends_on:
      base:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - file_storage:/app/storage
    networks:
      - rag_network
    restart: unless-stopped

  chat_service:
    build:
      context: .
      dockerfile: backend/chat_service/Dockerfile
    container_name: rag_chat_service
    ports:
      - "8003:8000"
    env_file:
      - .env.development
    environment:
      - SERVICE_NAME=chat_service
      - QDRANT_URL=http://qdrant:6333
    depends_on:
      base:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - rag_network
    restart: unless-stopped

  collection_service:
    build:
      context: .
      dockerfile: backend/collection_service/Dockerfile
    container_name: rag_collection_service
    ports:
      - "8004:8000"
    env_file:
      - .env.development
    environment:
      - SERVICE_NAME=collection_service
    depends_on:
      base:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - rag_network
    restart: unless-stopped

  mcp_orchestrator:
    build:
      context: .
      dockerfile: backend/mcp_orchestrator/Dockerfile
    container_name: rag_mcp_orchestrator
    ports:
      - "8005:8000"
    env_file:
      - .env.development
    environment:
      - SERVICE_NAME=mcp_orchestrator
    depends_on:
      base:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - rag_network
    restart: unless-stopped

  # API Gateway (Nginx)
  api_gateway:
    build:
      context: .
      dockerfile: backend/api_gateway_config/Dockerfile
    container_name: rag_api_gateway
    ports:
      - "8000:8000"
    depends_on:
      - auth_service
      - file_service
      - chat_service
      - collection_service
      - mcp_orchestrator
    volumes:
      - ./backend/api_gateway_config/nginx.conf:/etc/nginx/nginx.conf
    networks:
      - rag_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  qdrant_data:
  file_storage:

networks:
  rag_network:
    driver: bridge 