[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "advanced-rag-system"
version = "0.1.0"
description = "Advanced RAG System with File Analysis and AI Chat"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "Leon Melamud", email = "leon.melamud@example.com"},
]
keywords = ["rag", "ai", "chat", "document-analysis", "vector-search"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

# Core dependencies shared across all services
dependencies = [
    # Web Framework
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",

    # Database & ORM
    "sqlalchemy>=2.0.0",
    "alembic>=1.12.0",
    "asyncpg>=0.29.0",  # PostgreSQL async driver
    "psycopg2-binary>=2.9.0",  # PostgreSQL sync driver

    # Vector Database
    "qdrant-client>=1.6.0",
    "pinecone-client>=2.2.0",  # Alternative vector DB

    # AI/ML Libraries
    "openai>=1.3.0",
    "google-generativeai>=0.3.0",  # Gemini API
    "langchain>=0.1.0",
    "langchain-community>=0.0.10",
    "sentence-transformers>=2.2.0",
    "transformers>=4.35.0",
    "torch>=2.1.0",

    # File Processing
    "pypdf2>=3.0.0",
    "pymupdf>=1.23.0",  # PyMuPDF for robust PDF processing
    "pdfminer.six>=20221105",
    "python-multipart>=0.0.6",  # File uploads
    "python-magic>=0.4.27",  # MIME type detection
    "pandas>=2.1.0",  # CSV processing
    "openpyxl>=3.1.0",  # Excel support

    # Audio Processing
    "assemblyai>=0.17.0",  # Audio transcription
    "pydub>=0.25.0",  # Audio manipulation

    # Text Processing & Chunking
    "tiktoken>=0.5.0",  # Token counting
    "nltk>=3.8.0",
    "spacy>=3.7.0",
    "beautifulsoup4>=4.12.0",

    # Caching & Message Queue
    "redis>=5.0.0",
    "celery>=5.3.0",
    "kombu>=5.3.0",

    # Authentication & Security
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
    "cryptography>=41.0.0",

    # Configuration & Environment
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "python-dotenv>=1.0.0",
    "pyyaml>=6.0.0",

    # HTTP Client
    "httpx>=0.25.0",
    "aiohttp>=3.9.0",

    # Monitoring & Logging
    "prometheus-client>=0.19.0",
    "structlog>=23.2.0",
    "rich>=13.7.0",

    # Utilities
    "tenacity>=8.2.0",  # Retry logic
    "click>=8.1.0",  # CLI
    "jinja2>=3.1.0",  # Templating
    "email-validator>=2.1.0",
    "validators>=0.22.0",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.25.0",  # For testing FastAPI
    "factory-boy>=3.3.0",  # Test data factories
    "faker>=20.1.0",

    # Code Quality (Formatting only - no linting)
    "black>=23.11.0",
    "isort>=5.12.0",

    # Documentation
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.24.0",
]

# Production dependencies
prod = [
    "gunicorn>=21.2.0",
    "sentry-sdk[fastapi]>=1.38.0",
    "newrelic>=9.2.0",
]

# External tools integration
tools = [
    "mcp>=0.1.0",  # Model Context Protocol
    "jsonschema>=4.20.0",
    "requests>=2.31.0",
]

# Advanced ML features
ml-advanced = [
    "faiss-cpu>=1.7.4",  # Alternative vector search
    "chromadb>=0.4.0",  # Alternative vector DB
    "weaviate-client>=3.25.0",  # Alternative vector DB
    "llama-index>=0.9.0",  # Advanced RAG features
]

# Audio processing with Whisper (optional due to build complexity)
audio-whisper = [
    "openai-whisper>=20231117",  # Alternative transcription
]

[project.urls]
Homepage = "https://github.com/leon-melamud/advanced-rag-system"
Documentation = "https://github.com/leon-melamud/advanced-rag-system/docs"
Repository = "https://github.com/leon-melamud/advanced-rag-system"
Issues = "https://github.com/leon-melamud/advanced-rag-system/issues"

[project.scripts]
rag-server = "advanced_rag_system.cli:main"

[tool.uv]
dev-dependencies = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.25.0",
    "factory-boy>=3.3.0",
    "faker>=20.1.0",
    "black>=23.11.0",
    "isort>=5.12.0",
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.24.0",
]

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 100
known_first_party = ["advanced_rag_system"]

[tool.coverage.run]
source = ["backend"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
